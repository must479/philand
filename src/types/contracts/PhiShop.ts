/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface PhiShopInterface extends utils.Interface {
  functions: {
    "freeObjectAddress()": FunctionFragment;
    "premiumObjectAddress()": FunctionFragment;
    "shopBuyObject(address,uint256[],uint256[],uint256[])": FunctionFragment;
    "wallPaperAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "freeObjectAddress"
      | "premiumObjectAddress"
      | "shopBuyObject"
      | "wallPaperAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "freeObjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumObjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shopBuyObject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wallPaperAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "freeObjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumObjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shopBuyObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wallPaperAddress",
    data: BytesLike
  ): Result;

  events: {
    "LogShopBuyObject(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogShopBuyObject"): EventFragment;
}

export interface LogShopBuyObjectEventObject {
  sender: string;
  receiverAddress: string;
  buyCount: BigNumber;
  buyValue: BigNumber;
}
export type LogShopBuyObjectEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogShopBuyObjectEventObject
>;

export type LogShopBuyObjectEventFilter =
  TypedEventFilter<LogShopBuyObjectEvent>;

export interface PhiShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PhiShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    freeObjectAddress(overrides?: CallOverrides): Promise<[string]>;

    premiumObjectAddress(overrides?: CallOverrides): Promise<[string]>;

    shopBuyObject(
      receiverAddress: PromiseOrValue<string>,
      ftokenIds: PromiseOrValue<BigNumberish>[],
      ptokenIds: PromiseOrValue<BigNumberish>[],
      wtokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wallPaperAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  freeObjectAddress(overrides?: CallOverrides): Promise<string>;

  premiumObjectAddress(overrides?: CallOverrides): Promise<string>;

  shopBuyObject(
    receiverAddress: PromiseOrValue<string>,
    ftokenIds: PromiseOrValue<BigNumberish>[],
    ptokenIds: PromiseOrValue<BigNumberish>[],
    wtokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wallPaperAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    freeObjectAddress(overrides?: CallOverrides): Promise<string>;

    premiumObjectAddress(overrides?: CallOverrides): Promise<string>;

    shopBuyObject(
      receiverAddress: PromiseOrValue<string>,
      ftokenIds: PromiseOrValue<BigNumberish>[],
      ptokenIds: PromiseOrValue<BigNumberish>[],
      wtokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    wallPaperAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogShopBuyObject(address,address,uint256,uint256)"(
      sender?: null,
      receiverAddress?: null,
      buyCount?: null,
      buyValue?: null
    ): LogShopBuyObjectEventFilter;
    LogShopBuyObject(
      sender?: null,
      receiverAddress?: null,
      buyCount?: null,
      buyValue?: null
    ): LogShopBuyObjectEventFilter;
  };

  estimateGas: {
    freeObjectAddress(overrides?: CallOverrides): Promise<BigNumber>;

    premiumObjectAddress(overrides?: CallOverrides): Promise<BigNumber>;

    shopBuyObject(
      receiverAddress: PromiseOrValue<string>,
      ftokenIds: PromiseOrValue<BigNumberish>[],
      ptokenIds: PromiseOrValue<BigNumberish>[],
      wtokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wallPaperAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    freeObjectAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumObjectAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopBuyObject(
      receiverAddress: PromiseOrValue<string>,
      ftokenIds: PromiseOrValue<BigNumberish>[],
      ptokenIds: PromiseOrValue<BigNumberish>[],
      wtokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wallPaperAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
