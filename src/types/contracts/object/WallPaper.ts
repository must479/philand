/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace BaseObject {
  export type SizeStruct = {
    x: PromiseOrValue<BigNumberish>;
    y: PromiseOrValue<BigNumberish>;
    z: PromiseOrValue<BigNumberish>;
  };

  export type SizeStructOutput = [number, number, number] & {
    x: number;
    y: number;
    z: number;
  };

  export type ObjectStruct = {
    tokenURI: PromiseOrValue<string>;
    size: BaseObject.SizeStruct;
    creator: PromiseOrValue<string>;
    maxClaimed: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    exp: PromiseOrValue<BigNumberish>;
    forSale: PromiseOrValue<boolean>;
  };

  export type ObjectStructOutput = [
    string,
    BaseObject.SizeStructOutput,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenURI: string;
    size: BaseObject.SizeStructOutput;
    creator: string;
    maxClaimed: BigNumber;
    price: BigNumber;
    exp: BigNumber;
    forSale: boolean;
  };
}

export interface WallPaperInterface extends utils.Interface {
  functions: {
    "allObjects(uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "baseMetadataURI()": FunctionFragment;
    "batchWallPaper(uint256[])": FunctionFragment;
    "batchWallPaperFromShop(address,uint256[])": FunctionFragment;
    "changeTokenPrice(uint256,uint256)": FunctionFragment;
    "createWallPaper(uint256,string,(uint8,uint8,uint8),address,uint256,uint256)": FunctionFragment;
    "created(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getBaseMetadataURI()": FunctionFragment;
    "getCreatorAddress(uint256)": FunctionFragment;
    "getExp(uint256)": FunctionFragment;
    "getMaxClaimed(uint256)": FunctionFragment;
    "getObjectInfo(uint256)": FunctionFragment;
    "getObjectsPrice(uint256[])": FunctionFragment;
    "getOpenForSale(uint256)": FunctionFragment;
    "getRoyalityFee()": FunctionFragment;
    "getSize(uint256)": FunctionFragment;
    "getTokenPrice(uint256)": FunctionFragment;
    "getTokenURI(uint256)": FunctionFragment;
    "getTreasuryAddress()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerCheck(address)": FunctionFragment;
    "paymentBalanceOwner()": FunctionFragment;
    "phiMapAddress()": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "royalityFee()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "secondaryRoyalty()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCreatorAddress(uint256,address)": FunctionFragment;
    "setExp(uint256,uint256)": FunctionFragment;
    "setMaxClaimed(uint256,uint256)": FunctionFragment;
    "setOpenForSale(uint256,bool)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRoyalityFee(uint256)": FunctionFragment;
    "setSecondaryRoyalityFee(uint256)": FunctionFragment;
    "setShopAddress(address)": FunctionFragment;
    "setSize(uint256,(uint8,uint8,uint8))": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setbaseMetadataURI(string)": FunctionFragment;
    "shopAddress()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "withdrawOwnerBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allObjects"
      | "balanceOf"
      | "balanceOfBatch"
      | "baseMetadataURI"
      | "batchWallPaper"
      | "batchWallPaperFromShop"
      | "changeTokenPrice"
      | "createWallPaper"
      | "created"
      | "exists"
      | "getBaseMetadataURI"
      | "getCreatorAddress"
      | "getExp"
      | "getMaxClaimed"
      | "getObjectInfo"
      | "getObjectsPrice"
      | "getOpenForSale"
      | "getRoyalityFee"
      | "getSize"
      | "getTokenPrice"
      | "getTokenURI"
      | "getTreasuryAddress"
      | "isApprovedForAll"
      | "name"
      | "ownerCheck"
      | "paymentBalanceOwner"
      | "phiMapAddress"
      | "removeOwner"
      | "royalityFee"
      | "royaltyInfo"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "secondaryRoyalty"
      | "setApprovalForAll"
      | "setCreatorAddress"
      | "setExp"
      | "setMaxClaimed"
      | "setOpenForSale"
      | "setOwner"
      | "setRoyalityFee"
      | "setSecondaryRoyalityFee"
      | "setShopAddress"
      | "setSize"
      | "setTokenURI"
      | "setTreasuryAddress"
      | "setbaseMetadataURI"
      | "shopAddress"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "treasuryAddress"
      | "uri"
      | "withdrawOwnerBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allObjects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "baseMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchWallPaper",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWallPaperFromShop",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallPaper",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      BaseObject.SizeStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "created",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxClaimed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getObjectInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getObjectsPrice",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenForSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyalityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentBalanceOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "phiMapAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royalityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryRoyalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreatorAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxClaimed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenForSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalityFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryRoyalityFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShopAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSize",
    values: [PromiseOrValue<BigNumberish>, BaseObject.SizeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setbaseMetadataURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shopAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOwnerBalance",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "allObjects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWallPaper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWallPaperFromShop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallPaper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getObjectInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getObjectsPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyalityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerCheck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentBalanceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phiMapAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royalityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryRoyalityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShopAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setbaseMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shopAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOwnerBalance",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ChangeTokenPrice(uint256,uint256)": EventFragment;
    "CreateWallPaper(uint256,string,tuple,address,uint256,uint256)": EventFragment;
    "LogBuyWallPaper(address,uint256,uint256)": EventFragment;
    "OwnershipGranted(address,address)": EventFragment;
    "OwnershipRemoved(address,address)": EventFragment;
    "PaymentReceivedOwner(uint256)": EventFragment;
    "PaymentWithdrawnOwner(uint256)": EventFragment;
    "SetCreator(uint256,address)": EventFragment;
    "SetExp(uint256,uint256)": EventFragment;
    "SetMaxClaimed(uint256,uint256)": EventFragment;
    "SetOpenForSale(uint256,bool)": EventFragment;
    "SetRoyalityFee(uint256)": EventFragment;
    "SetSecondaryRoyalityFee(uint256)": EventFragment;
    "SetShopAddress(address)": EventFragment;
    "SetSize(uint256,uint8,uint8,uint8)": EventFragment;
    "SetTokenURI(uint256,string)": EventFragment;
    "SetTreasuryAddress(address)": EventFragment;
    "SetbaseMetadataURI(string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeTokenPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateWallPaper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBuyWallPaper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceivedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentWithdrawnOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCreator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOpenForSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRoyalityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSecondaryRoyalityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetShopAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetbaseMetadataURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ChangeTokenPriceEventObject {
  tokenId: BigNumber;
  newPrice: BigNumber;
}
export type ChangeTokenPriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  ChangeTokenPriceEventObject
>;

export type ChangeTokenPriceEventFilter =
  TypedEventFilter<ChangeTokenPriceEvent>;

export interface CreateWallPaperEventObject {
  tokenId: BigNumber;
  tokenUri: string;
  size: BaseObject.SizeStructOutput;
  creator: string;
  maxClaimed: BigNumber;
  price: BigNumber;
}
export type CreateWallPaperEvent = TypedEvent<
  [
    BigNumber,
    string,
    BaseObject.SizeStructOutput,
    string,
    BigNumber,
    BigNumber
  ],
  CreateWallPaperEventObject
>;

export type CreateWallPaperEventFilter = TypedEventFilter<CreateWallPaperEvent>;

export interface LogBuyWallPaperEventObject {
  sender: string;
  tokenId: BigNumber;
  value: BigNumber;
}
export type LogBuyWallPaperEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LogBuyWallPaperEventObject
>;

export type LogBuyWallPaperEventFilter = TypedEventFilter<LogBuyWallPaperEvent>;

export interface OwnershipGrantedEventObject {
  operator: string;
  target: string;
}
export type OwnershipGrantedEvent = TypedEvent<
  [string, string],
  OwnershipGrantedEventObject
>;

export type OwnershipGrantedEventFilter =
  TypedEventFilter<OwnershipGrantedEvent>;

export interface OwnershipRemovedEventObject {
  operator: string;
  target: string;
}
export type OwnershipRemovedEvent = TypedEvent<
  [string, string],
  OwnershipRemovedEventObject
>;

export type OwnershipRemovedEventFilter =
  TypedEventFilter<OwnershipRemovedEvent>;

export interface PaymentReceivedOwnerEventObject {
  amount: BigNumber;
}
export type PaymentReceivedOwnerEvent = TypedEvent<
  [BigNumber],
  PaymentReceivedOwnerEventObject
>;

export type PaymentReceivedOwnerEventFilter =
  TypedEventFilter<PaymentReceivedOwnerEvent>;

export interface PaymentWithdrawnOwnerEventObject {
  amount: BigNumber;
}
export type PaymentWithdrawnOwnerEvent = TypedEvent<
  [BigNumber],
  PaymentWithdrawnOwnerEventObject
>;

export type PaymentWithdrawnOwnerEventFilter =
  TypedEventFilter<PaymentWithdrawnOwnerEvent>;

export interface SetCreatorEventObject {
  tokenId: BigNumber;
  creator: string;
}
export type SetCreatorEvent = TypedEvent<
  [BigNumber, string],
  SetCreatorEventObject
>;

export type SetCreatorEventFilter = TypedEventFilter<SetCreatorEvent>;

export interface SetExpEventObject {
  tokenId: BigNumber;
  exp: BigNumber;
}
export type SetExpEvent = TypedEvent<[BigNumber, BigNumber], SetExpEventObject>;

export type SetExpEventFilter = TypedEventFilter<SetExpEvent>;

export interface SetMaxClaimedEventObject {
  tokenId: BigNumber;
  newMaxClaimed: BigNumber;
}
export type SetMaxClaimedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMaxClaimedEventObject
>;

export type SetMaxClaimedEventFilter = TypedEventFilter<SetMaxClaimedEvent>;

export interface SetOpenForSaleEventObject {
  tokenId: BigNumber;
  check: boolean;
}
export type SetOpenForSaleEvent = TypedEvent<
  [BigNumber, boolean],
  SetOpenForSaleEventObject
>;

export type SetOpenForSaleEventFilter = TypedEventFilter<SetOpenForSaleEvent>;

export interface SetRoyalityFeeEventObject {
  royalityFee: BigNumber;
}
export type SetRoyalityFeeEvent = TypedEvent<
  [BigNumber],
  SetRoyalityFeeEventObject
>;

export type SetRoyalityFeeEventFilter = TypedEventFilter<SetRoyalityFeeEvent>;

export interface SetSecondaryRoyalityFeeEventObject {
  secondaryRoyalty: BigNumber;
}
export type SetSecondaryRoyalityFeeEvent = TypedEvent<
  [BigNumber],
  SetSecondaryRoyalityFeeEventObject
>;

export type SetSecondaryRoyalityFeeEventFilter =
  TypedEventFilter<SetSecondaryRoyalityFeeEvent>;

export interface SetShopAddressEventObject {
  shopAddress: string;
}
export type SetShopAddressEvent = TypedEvent<
  [string],
  SetShopAddressEventObject
>;

export type SetShopAddressEventFilter = TypedEventFilter<SetShopAddressEvent>;

export interface SetSizeEventObject {
  tokenId: BigNumber;
  x: number;
  y: number;
  z: number;
}
export type SetSizeEvent = TypedEvent<
  [BigNumber, number, number, number],
  SetSizeEventObject
>;

export type SetSizeEventFilter = TypedEventFilter<SetSizeEvent>;

export interface SetTokenURIEventObject {
  tokenId: BigNumber;
  uri: string;
}
export type SetTokenURIEvent = TypedEvent<
  [BigNumber, string],
  SetTokenURIEventObject
>;

export type SetTokenURIEventFilter = TypedEventFilter<SetTokenURIEvent>;

export interface SetTreasuryAddressEventObject {
  treasuryAddress: string;
}
export type SetTreasuryAddressEvent = TypedEvent<
  [string],
  SetTreasuryAddressEventObject
>;

export type SetTreasuryAddressEventFilter =
  TypedEventFilter<SetTreasuryAddressEvent>;

export interface SetbaseMetadataURIEventObject {
  baseuri: string;
}
export type SetbaseMetadataURIEvent = TypedEvent<
  [string],
  SetbaseMetadataURIEventObject
>;

export type SetbaseMetadataURIEventFilter =
  TypedEventFilter<SetbaseMetadataURIEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface WallPaper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WallPaperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allObjects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BaseObject.SizeStructOutput,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        tokenURI: string;
        size: BaseObject.SizeStructOutput;
        creator: string;
        maxClaimed: BigNumber;
        price: BigNumber;
        exp: BigNumber;
        forSale: boolean;
      }
    >;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    baseMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    batchWallPaper(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchWallPaperFromShop(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createWallPaper(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      size: BaseObject.SizeStruct,
      creator: PromiseOrValue<string>,
      maxClaimed: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    created(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBaseMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    getCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getExp(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getObjectInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BaseObject.ObjectStructOutput]>;

    getObjectsPrice(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoyalityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSize(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BaseObject.SizeStructOutput]>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerCheck(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paymentBalanceOwner(overrides?: CallOverrides): Promise<[BigNumber]>;

    phiMapAddress(overrides?: CallOverrides): Promise<[string]>;

    removeOwner(
      oldOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royalityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    secondaryRoyalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExp(
      tokenId: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      newMaxClaimed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      check: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyalityFee(
      newRoyalityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecondaryRoyalityFee(
      newSecondaryRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShopAddress(
      _shopAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSize(
      tokenId: PromiseOrValue<BigNumberish>,
      size: BaseObject.SizeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setbaseMetadataURI(
      newBaseMetadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shopAddress(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawOwnerBalance(
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allObjects(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BaseObject.SizeStructOutput,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      tokenURI: string;
      size: BaseObject.SizeStructOutput;
      creator: string;
      maxClaimed: BigNumber;
      price: BigNumber;
      exp: BigNumber;
      forSale: boolean;
    }
  >;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  baseMetadataURI(overrides?: CallOverrides): Promise<string>;

  batchWallPaper(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchWallPaperFromShop(
    to: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTokenPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createWallPaper(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenUri: PromiseOrValue<string>,
    size: BaseObject.SizeStruct,
    creator: PromiseOrValue<string>,
    maxClaimed: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  created(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exists(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBaseMetadataURI(overrides?: CallOverrides): Promise<string>;

  getCreatorAddress(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getExp(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxClaimed(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getObjectInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BaseObject.ObjectStructOutput>;

  getObjectsPrice(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenForSale(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoyalityFee(overrides?: CallOverrides): Promise<BigNumber>;

  getSize(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BaseObject.SizeStructOutput>;

  getTokenPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerCheck(
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paymentBalanceOwner(overrides?: CallOverrides): Promise<BigNumber>;

  phiMapAddress(overrides?: CallOverrides): Promise<string>;

  removeOwner(
    oldOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royalityFee(overrides?: CallOverrides): Promise<BigNumber>;

  royaltyInfo(
    arg0: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
  >;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  secondaryRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreatorAddress(
    tokenId: PromiseOrValue<BigNumberish>,
    creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExp(
    tokenId: PromiseOrValue<BigNumberish>,
    exp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxClaimed(
    tokenId: PromiseOrValue<BigNumberish>,
    newMaxClaimed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOpenForSale(
    tokenId: PromiseOrValue<BigNumberish>,
    check: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyalityFee(
    newRoyalityFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecondaryRoyalityFee(
    newSecondaryRoyalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShopAddress(
    _shopAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSize(
    tokenId: PromiseOrValue<BigNumberish>,
    size: BaseObject.SizeStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    newTreasuryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setbaseMetadataURI(
    newBaseMetadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shopAddress(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  uri(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawOwnerBalance(
    withdrawTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allObjects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BaseObject.SizeStructOutput,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        tokenURI: string;
        size: BaseObject.SizeStructOutput;
        creator: string;
        maxClaimed: BigNumber;
        price: BigNumber;
        exp: BigNumber;
        forSale: boolean;
      }
    >;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    baseMetadataURI(overrides?: CallOverrides): Promise<string>;

    batchWallPaper(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchWallPaperFromShop(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createWallPaper(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      size: BaseObject.SizeStruct,
      creator: PromiseOrValue<string>,
      maxClaimed: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    created(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBaseMetadataURI(overrides?: CallOverrides): Promise<string>;

    getCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getExp(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getObjectInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BaseObject.ObjectStructOutput>;

    getObjectsPrice(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoyalityFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSize(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BaseObject.SizeStructOutput>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerCheck(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paymentBalanceOwner(overrides?: CallOverrides): Promise<BigNumber>;

    phiMapAddress(overrides?: CallOverrides): Promise<string>;

    removeOwner(
      oldOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royalityFee(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { receiver: string; royaltyAmount: BigNumber }
    >;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    secondaryRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExp(
      tokenId: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      newMaxClaimed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      check: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyalityFee(
      newRoyalityFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecondaryRoyalityFee(
      newSecondaryRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShopAddress(
      _shopAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSize(
      tokenId: PromiseOrValue<BigNumberish>,
      size: BaseObject.SizeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      newTreasuryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setbaseMetadataURI(
      newBaseMetadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shopAddress(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawOwnerBalance(
      withdrawTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ChangeTokenPrice(uint256,uint256)"(
      tokenId?: null,
      newPrice?: null
    ): ChangeTokenPriceEventFilter;
    ChangeTokenPrice(
      tokenId?: null,
      newPrice?: null
    ): ChangeTokenPriceEventFilter;

    "CreateWallPaper(uint256,string,tuple,address,uint256,uint256)"(
      tokenId?: null,
      tokenUri?: null,
      size?: null,
      creator?: null,
      maxClaimed?: null,
      price?: null
    ): CreateWallPaperEventFilter;
    CreateWallPaper(
      tokenId?: null,
      tokenUri?: null,
      size?: null,
      creator?: null,
      maxClaimed?: null,
      price?: null
    ): CreateWallPaperEventFilter;

    "LogBuyWallPaper(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      tokenId?: null,
      value?: null
    ): LogBuyWallPaperEventFilter;
    LogBuyWallPaper(
      sender?: PromiseOrValue<string> | null,
      tokenId?: null,
      value?: null
    ): LogBuyWallPaperEventFilter;

    "OwnershipGranted(address,address)"(
      operator?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null
    ): OwnershipGrantedEventFilter;
    OwnershipGranted(
      operator?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null
    ): OwnershipGrantedEventFilter;

    "OwnershipRemoved(address,address)"(
      operator?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null
    ): OwnershipRemovedEventFilter;
    OwnershipRemoved(
      operator?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null
    ): OwnershipRemovedEventFilter;

    "PaymentReceivedOwner(uint256)"(
      amount?: null
    ): PaymentReceivedOwnerEventFilter;
    PaymentReceivedOwner(amount?: null): PaymentReceivedOwnerEventFilter;

    "PaymentWithdrawnOwner(uint256)"(
      amount?: null
    ): PaymentWithdrawnOwnerEventFilter;
    PaymentWithdrawnOwner(amount?: null): PaymentWithdrawnOwnerEventFilter;

    "SetCreator(uint256,address)"(
      tokenId?: null,
      creator?: null
    ): SetCreatorEventFilter;
    SetCreator(tokenId?: null, creator?: null): SetCreatorEventFilter;

    "SetExp(uint256,uint256)"(tokenId?: null, exp?: null): SetExpEventFilter;
    SetExp(tokenId?: null, exp?: null): SetExpEventFilter;

    "SetMaxClaimed(uint256,uint256)"(
      tokenId?: null,
      newMaxClaimed?: null
    ): SetMaxClaimedEventFilter;
    SetMaxClaimed(
      tokenId?: null,
      newMaxClaimed?: null
    ): SetMaxClaimedEventFilter;

    "SetOpenForSale(uint256,bool)"(
      tokenId?: null,
      check?: null
    ): SetOpenForSaleEventFilter;
    SetOpenForSale(tokenId?: null, check?: null): SetOpenForSaleEventFilter;

    "SetRoyalityFee(uint256)"(royalityFee?: null): SetRoyalityFeeEventFilter;
    SetRoyalityFee(royalityFee?: null): SetRoyalityFeeEventFilter;

    "SetSecondaryRoyalityFee(uint256)"(
      secondaryRoyalty?: null
    ): SetSecondaryRoyalityFeeEventFilter;
    SetSecondaryRoyalityFee(
      secondaryRoyalty?: null
    ): SetSecondaryRoyalityFeeEventFilter;

    "SetShopAddress(address)"(shopAddress?: null): SetShopAddressEventFilter;
    SetShopAddress(shopAddress?: null): SetShopAddressEventFilter;

    "SetSize(uint256,uint8,uint8,uint8)"(
      tokenId?: null,
      x?: null,
      y?: null,
      z?: null
    ): SetSizeEventFilter;
    SetSize(tokenId?: null, x?: null, y?: null, z?: null): SetSizeEventFilter;

    "SetTokenURI(uint256,string)"(
      tokenId?: null,
      uri?: null
    ): SetTokenURIEventFilter;
    SetTokenURI(tokenId?: null, uri?: null): SetTokenURIEventFilter;

    "SetTreasuryAddress(address)"(
      treasuryAddress?: null
    ): SetTreasuryAddressEventFilter;
    SetTreasuryAddress(treasuryAddress?: null): SetTreasuryAddressEventFilter;

    "SetbaseMetadataURI(string)"(baseuri?: null): SetbaseMetadataURIEventFilter;
    SetbaseMetadataURI(baseuri?: null): SetbaseMetadataURIEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    allObjects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    batchWallPaper(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchWallPaperFromShop(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createWallPaper(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      size: BaseObject.SizeStruct,
      creator: PromiseOrValue<string>,
      maxClaimed: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    created(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExp(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getObjectInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getObjectsPrice(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyalityFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSize(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCheck(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentBalanceOwner(overrides?: CallOverrides): Promise<BigNumber>;

    phiMapAddress(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      oldOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royalityFee(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    secondaryRoyalty(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExp(
      tokenId: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      newMaxClaimed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      check: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyalityFee(
      newRoyalityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecondaryRoyalityFee(
      newSecondaryRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShopAddress(
      _shopAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSize(
      tokenId: PromiseOrValue<BigNumberish>,
      size: BaseObject.SizeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      newTreasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setbaseMetadataURI(
      newBaseMetadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shopAddress(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawOwnerBalance(
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allObjects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseMetadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchWallPaper(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchWallPaperFromShop(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createWallPaper(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenUri: PromiseOrValue<string>,
      size: BaseObject.SizeStruct,
      creator: PromiseOrValue<string>,
      maxClaimed: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    created(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseMetadataURI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExp(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getObjectInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getObjectsPrice(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyalityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSize(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCheck(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentBalanceOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phiMapAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOwner(
      oldOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royalityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyInfo(
      arg0: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    secondaryRoyalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreatorAddress(
      tokenId: PromiseOrValue<BigNumberish>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExp(
      tokenId: PromiseOrValue<BigNumberish>,
      exp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      newMaxClaimed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOpenForSale(
      tokenId: PromiseOrValue<BigNumberish>,
      check: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyalityFee(
      newRoyalityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecondaryRoyalityFee(
      newSecondaryRoyalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShopAddress(
      _shopAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSize(
      tokenId: PromiseOrValue<BigNumberish>,
      size: BaseObject.SizeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setbaseMetadataURI(
      newBaseMetadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shopAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawOwnerBalance(
      withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
